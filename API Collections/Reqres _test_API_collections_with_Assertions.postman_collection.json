{
	"info": {
		"_postman_id": "824e1d0d-aa21-4c4f-92da-3d4b9fd7c7d2",
		"name": "ReqresTESt",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17026327"
	},
	"item": [
		{
			"name": "Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Data object schema is valid\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.be.an('object');",
							"  pm.expect(responseData.data.id).to.be.a('number');",
							"  pm.expect(responseData.data.email).to.be.a('string');",
							"  pm.expect(responseData.data.first_name).to.be.a('string');",
							"  pm.expect(responseData.data.last_name).to.be.a('string');",
							"  pm.expect(responseData.data.avatar).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);",
							"});",
							"",
							"",
							"pm.test(\"Support object is present and contains expected fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.support).to.exist;",
							"    pm.expect(responseData.support.url).to.exist;",
							"    pm.expect(responseData.support.text).to.exist;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "List User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Page is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.page).to.eql(2);",
							"});",
							"",
							"pm.test(\"User data array is not empty\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"pm.test(\"Check first user details\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data[0]).to.have.property('id');",
							"    pm.expect(jsonData.data[0]).to.have.property('email');",
							"    pm.expect(jsonData.data[0].email).to.include('@reqres.in'); // Verify email domain",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?page=2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201); // POST usually returns 201 Created",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Response has name and job\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name', 'Kseniia');",
							"    pm.expect(jsonData).to.have.property('job', 'Antoshchenko');",
							"});",
							"",
							"pm.test(\"Response has id and createdAt\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id'); // Checks if 'id' is present",
							"    pm.expect(jsonData).to.have.property('createdAt'); // Checks if 'createdAt' is present",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Kseniia\",\n    \"job\": \"Antoshchenko\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users?page=2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200); // PUT typically returns 200 OK for successful updates",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Response has updated name and job\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name', 'morpheus');",
							"    pm.expect(jsonData).to.have.property('job', 'zion resident');",
							"});",
							"",
							"pm.test(\"Response contains updatedAt\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('updatedAt'); // Verifies that the 'updatedAt' field is present",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Particual update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200); // PATCH typically returns 200 OK for successful updates",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Response has updated name and job\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name', 'Artem');",
							"    pm.expect(jsonData).to.have.property('job', 'QA Tester');",
							"});",
							"",
							"pm.test(\"Response contains updatedAt\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('updatedAt'); // Verifies that the 'updatedAt' field is present",
							"});",
							"",
							"pm.test(\"updatedAt is correctly formatted\", function () {",
							"    const jsonData = pm.response.json();",
							"    const regex = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/; // Matches ISO 8601 date format",
							"    pm.expect(jsonData.updatedAt).to.match(regex); // Validates the format of updatedAt",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Artem\",\n    \"job\": \"QA Tester\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Successfull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200); // 200 OK indicates successful registration",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Response contains token\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('token'); // Verifies that a 'token' is returned upon successful registration",
							"});",
							"",
							"pm.test(\"Token is not empty\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.token).to.not.be.empty; // Ensures the token is present and not empty",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/register",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400); ",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"sydney@fife\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/register",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200); // Expect 200 OK for a successful login",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Token is present\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('token'); // Asserts that the response contains the token",
							"});",
							"",
							"pm.test(\"Token is not empty\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.token).to.not.be.empty; // Ensures the token field is not empty",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/login",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Unsuccesf",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400); // 400 Bad Request indicates the request is invalid",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Error message is 'Missing password'\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error', 'Missing password');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\n\n{\n    \"email\": \"peter@klaven\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/login",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delayed response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200); // Successful GET request returns 200 OK",
							"});",
							"",
							"pm.test(\"Response time is greater than 3000ms due to delay\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.above(3000); // Expect response time to be greater than 3 seconds due to delay",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Data array is present and not empty\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"pm.test(\"Check if page value is present\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('page'); // Verifies 'page' property exists in the response",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?delay=3",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204); // DELETE requests often return 204 No Content for successful deletion",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response has no content\", function () {",
							"    pm.expect(pm.response.text()).to.be.empty; // Verifies the response body is empty",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	]
}